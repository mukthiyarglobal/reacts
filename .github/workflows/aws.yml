name: Deploy to Amazon ECS

on:
  push:
    branches: [main]

env:
  ECR_REPOSITORY: reactrepo
  ECS_SERVICE: reactapp-service
  ECS_CLUSTER: react-cluster              
  CONTAINER_NAME: reactrepo-container

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push images to Amazon ECR
        id: build-images
        run: |
          for i in {1..2}; do
            PIPELINE_NUMBER="v$i"
            TAGGED_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$PIPELINE_NUMBER
            docker build -t $TAGGED_IMAGE .
            docker push $TAGGED_IMAGE
          done

      - name: Get previous "latest" image tag
        id: get-previous-latest-tag
        run: |
          PREVIOUS_LATEST=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --query 'sort_by(imageDetails,& imagePushedAt)[?imageTags[0]==`latest`].imageTags[-1]' --output text)
          echo "::set-output name=previous_latest::$PREVIOUS_LATEST"

      - name: Delete previous "latest" image tag
        if: steps.get-previous-latest-tag.outputs.previous_latest != ''
        run: |
          aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageTag=${{ steps.get-previous-latest-tag.outputs.previous_latest }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition reactapp-family \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image IDs in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-images.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
