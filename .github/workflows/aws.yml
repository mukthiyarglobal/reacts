name: Deploy to Amazon ECS

on:
  push:
    branches: [main]

env:
  ECR_REPOSITORY: reactrepo
  ECS_SERVICE: reactapp-service
  ECS_CLUSTER: react-cluster              
  CONTAINER_NAME: reactrepo-container

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          PIPELINE_NUMBER: ${{ github.run_number }}
          IMAGE_TAG: "v${{ github.run_number }}"
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:v${PIPELINE_NUMBER} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:v${PIPELINE_NUMBER}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:v${PIPELINE_NUMBER} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Remove Previous "latest" Tag
        run: |
          IMAGE_ID=$(docker images -q $ECR_REGISTRY/$ECR_REPOSITORY:latest)
          if [ ! -z "$IMAGE_ID" ]; then
            docker rmi $IMAGE_ID
          fi

      # - name: Download task definition
      #   run: |
      #     aws ecs describe-task-definition --task-definition reactapp-family \
      #     --query taskDefinition > task-definition.json

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
